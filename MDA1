# HomeWork1/Part1

from datetime import datetime, timedelta

WEEKDAYS = ["Monday", "Tuesday", "Wednesday", "Thursday", "Friday"]
USERS = [
    {"name": "Ann", "birthday": datetime(year=1950, month=10, day=27).date()},
    {"name": "Charl", "birthday": datetime(year=1960, month=10, day=27).date()},
    {"name": "Richard", "birthday": datetime(year=1970, month=10, day=27).date()},
    {"name": "Alex", "birthday": datetime(year=1980, month=10, day=27).date()},
    {"name": "Max", "birthday": datetime(year=1990, month=10, day=27).date()},
]

def close_birthday_users(users, start, end):
    now = datetime.today().date()
    result = [user for user in users if start <= user["birthday"].replace(year=now.year) <= end]
    return result

def get_birthdays_per_week(users):
    now = datetime.today().date()
    current_week_day = now.weekday()
    if current_week_day >= 5:
        start_date = now - timedelta(days=(7 - current_week_day))
    elif current_week_day == 0:
        start_date = now - timedelta(days=2)
    else:
        start_date = now
    days_ahead = 4 - current_week_day
    if days_ahead < 0:
        days_ahead += 7
    end_date = now + timedelta(days=days_ahead)
    
    birthday_users = close_birthday_users(users, start=start_date, end=end_date)
    weekday = None
    result = {}  # Store birthday celebrants by day
    for user in sorted(birthday_users, key=lambda x: x["birthday"].replace(year=now.year).weekday()):
        user_birthday = user["birthday"].replace(year=now.year).weekday()
        user_congratulation_day = WEEKDAYS[user_birthday]
        
        if user_congratulation_day not in result:
            result[user_congratulation_day] = []
        
        result[user_congratulation_day].append(user["name"])
    
    for day, names in result.items():
        print(f"{day}: {', '.join(names)}")

if __name__ == "__main__":
    get_birthdays_per_week(USERS)




# Homework1/Part2


CONTACTS = {}

def parse_input(user_input):
    user_input = user_input.split()
    command = user_input[0].lower()
    args = user_input[1:] if len(user_input) > 1 else []
    return command, args

def add_contact(name, phone):
    if name in CONTACTS:
        return f"Contact for {name} already exists"
    elif len(phone) == 0:
        return "Please provide a name and phone"
    else:
        CONTACTS[name] = phone
        return f"Contact added: {name}, {phone}"

def change_contact(name, phone):
    if name in CONTACTS:
        CONTACTS[name] = phone
        return f"Contact updated: {name}, {phone}"
    else:
        return f"No contact found for {name}"

def show_phone(name):
    if name in CONTACTS:
        return f"Phone for {name}: {CONTACTS[name]}"
    else:
        return f"No contact found for {name}"

def show_all():
    if not CONTACTS:
        return "No contacts found"
    else:
        result = "All contacts:\n"
        for name, phone in CONTACTS.items():
            result += f"{name}: {phone}\n"
        return result

def main():
    print("Welcome to the assistant bot!")
    while True:
        user_input = input("Enter a command: ").strip()

        command, args = parse_input(user_input)

        if command in ["close", "exit"]:
            print("Good bye!")
            break

        elif command == "hello":
            print("How can I help you?")

        elif command == "add":
            result = add_contact(*args)
            print(result)

        elif command == "change":
            result = change_contact(*args)
            print(result)

        elif command == "phone":
            result = show_phone(*args)
            print(result)

        elif command == "all":
            result = show_all()
            print(result)

        else:
            print("Unknown command")

if __name__ == "__main__":
    main()
